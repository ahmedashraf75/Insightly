@model Article
@using System.Security.Claims
@inject UserManager<Insightly.Models.ApplicationUser> _userManager

@{
    ViewData["Title"] = Model.Title;
    var currentUserId = User.Identity != null && User.Identity.IsAuthenticated
                        ? User.FindFirstValue(ClaimTypes.NameIdentifier)
                        : "";
    var currentUser = User.Identity != null && User.Identity.IsAuthenticated
                      ? await _userManager.GetUserAsync(User)
                      : null;
}

<div class="details-page py-4">
    <div class="post-card mb-4">
        <div class="p-4">
            <div class="d-flex justify-content-between align-items-start mb-2">
                <div class="flex-grow-1">
                    <div class="d-flex align-items-center gap-3 mb-1">
                        <div class="flex-shrink-0">
                            @if (!string.IsNullOrEmpty(Model.Author.ProfilePicture))
                            {
                                <img src="@Model.Author.ProfilePicture" alt="@Model.Author.Name" class="rounded-circle" style="width: 36px; height: 36px; object-fit: cover;" />
                            }
                            else
                            {
                                <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width: 36px; height: 36px;">
                                    <i class="bi bi-person-fill text-white small"></i>
                                </div>
                            }
                        </div>
                        <div class="d-flex align-items-center gap-2 small">
                            <a asp-controller="Profile" asp-action="ViewProfile" asp-route-id="@Model.AuthorId" class="text-decoration-none fw-bold" style="color: #ff4b37 !important;">@Model.Author.Name</a>
                            <span class="text-muted">•</span>
                            @if (Model.UpdatedAt.HasValue)
                            {
                                <span class="text-muted"><i class="bi bi-clock me-1"></i>Edited @Model.UpdatedAt.Value.ToString("dd MMM h:mm tt")</span>
                            }
                            else
                            {
                                <span class="text-muted"><i class="bi bi-clock me-1"></i>@Model.CreatedAt.ToString("dd MMM h:mm tt")</span>
                            }
                        </div>
                    </div>
                    <h2 class="mb-0">@Model.Title</h2>
                </div>
                @if (User.Identity != null && User.Identity.IsAuthenticated)
                {
                    <div class="ms-3 flex-shrink-0">
                        @* Show Edit when the current user is the author (admin or not) *@
                        @if (Model.AuthorId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                        {
                            <a asp-action="Edit" asp-route-id="@Model.ArticleId" class="btn btn-outline-secondary me-2" title="Edit"><i class="bi bi-pencil"></i></a>
                        }
                        
                        @* Show Delete when author or admin *@
                        @if (Model.AuthorId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value || User.IsInRole("Admin"))
                        {
                            <a asp-action="Delete" asp-route-id="@Model.ArticleId" class="btn btn-outline-danger" title="Delete"><i class="bi bi-trash"></i></a>
                        }
                    </div>
                }
            </div>
            <div class="mt-3 post-content">
                <p class="mb-0">@Model.Content</p>
            </div>

            @if (!string.IsNullOrEmpty(Model.ImagePath))
            {
                <div class="mt-3">
                    <img src="@Model.ImagePath" alt="@Model.Title" class="img-fluid rounded" style="max-height: 420px; object-fit: cover;" />
                </div>
            }

            <hr class="my-3 action-sep" />
            <div class="post-actions d-flex align-items-center flex-wrap mt-2">
                <div class="action-vote pill d-inline-flex align-items-center me-2" style="background-color: #e9ecef; border-color: #dee2e6; color: #000000 !important;">
                    <form asp-controller="Votes" asp-action="Vote" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="articleId" value="@Model.ArticleId" />
                        <input type="hidden" name="isUpvote" value="true" />
                        <button type="submit" id="ab-upvote" class="action-btn btn-icon" data-article-id="@Model.ArticleId" aria-label="Upvote"><i class="bi bi-arrow-up"></i></button>
                    </form>
                    <span class="score mx-1" id="ab-score" style="color: #000000 !important;">@ViewBag.NetScore</span>
                    <form asp-controller="Votes" asp-action="Vote" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="articleId" value="@Model.ArticleId" />
                        <input type="hidden" name="isUpvote" value="false" />
                        <button type="submit" id="ab-downvote" class="action-btn btn-icon" data-article-id="@Model.ArticleId" aria-label="Downvote"><i class="bi bi-arrow-down"></i></button>
                    </form>
                </div>
                <a href="#comments" class="action-btn pill comment" id="btn-scroll-comments" aria-label="Comments" style="background-color: #e9ecef; border-color: #dee2e6; color: #000000 !important;"><i class="bi bi-chat" style="color: #000000 !important;"></i><span id="comments-count-top" style="color: #000000 !important;">@ViewBag.CommentsCount</span></a>
                <button class="action-btn pill" id="btn-share" type="button" aria-label="Share" style="background-color: #e9ecef; border-color: #dee2e6; color: #000000 !important;"><i class="bi bi-share" style="color: #000000 !important;"></i><span class="d-none d-sm-inline ms-1" style="color: #000000 !important;">Share</span></button>
                @if (User.Identity != null && User.Identity.IsAuthenticated)
                {
                    <form asp-controller="Articles" asp-action="Save" asp-route-id="@Model.ArticleId" method="post" class="d-inline" id="save-form">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="action-btn pill btn-icon @(ViewBag.IsRead == true ? "is-on" : "")" title="@(ViewBag.IsRead == true ? "Unsave article" : "Save article")" style="background-color: #e9ecef; border-color: #dee2e6; color: #000000 !important;">
                            <i class="bi @(ViewBag.IsRead == true ? "bi-bookmark-fill" : "bi-bookmark")" style="color: #000000 !important;"></i>
                            <span class="d-none d-sm-inline ms-1" style="color: #000000 !important;">Save</span>
                        </button>
                    </form>
                }
            </div>
        </div>
    </div>

    <div class="post-card p-4 mb-4" id="comments">
        <div class="d-flex align-items-center justify-content-between mb-4">
            <h5 class="fw-bold mb-0">
                Comments (<span id="comments-count">@ViewBag.CommentsCount</span>)
            </h5>
            @if (User.Identity != null && User.Identity.IsAuthenticated)
            {
                <div class="text-muted small">
                    <i class="bi bi-person-check me-1"></i>You can comment
                </div>
            }
        </div>

        @if (User.Identity != null && User.Identity.IsAuthenticated)
        {
            <div class="comment-composer mb-4">
                <form asp-controller="Comments" asp-action="Add" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="articleId" value="@Model.ArticleId" />
                    <div class="d-flex align-items-start gap-3">
                        <div class="flex-shrink-0">
                            @if (currentUser != null && !string.IsNullOrEmpty(currentUser.ProfilePicture))
                            {
                                <img src="@currentUser.ProfilePicture" alt="@currentUser.Name" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover;" />
                            }
                            else
                            {
                                <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                    <i class="bi bi-person-fill text-white"></i>
                                </div>
                            }
                        </div>
                        <div class="flex-grow-1">
                            <textarea name="content" id="comment-content" class="form-control composer-input collapsed" rows="3" placeholder="Share your thoughts..." required></textarea>
                            <div class="composer-actions">
                                <button type="submit" class="btn btn-sm" style="background-color: #ff4b37; border-color: #ff4b37; color: white;">
                                    <i class="bi bi-send me-1"></i>Comment
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        }
        else
        {
            <div class="text-center py-4 mb-4" style="background-color: #f8f9fa; border-radius: 0.5rem;">
                <i class="bi bi-lock text-muted mb-2" style="font-size: 2rem;"></i>
                <p class="text-muted mb-2">You need to be logged in to comment</p>
                <a href="/Identity/Account/Login" class="btn btn-outline-dark btn-sm">Login to Comment</a>
            </div>
        }

        <div id="comments-list">
            @if (Model.Comments.Any())
            {
                @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
                {
                    <div class="comment-item mb-3" data-comment-id="@comment.CommentId" data-author-id="@comment.AuthorId">
                        <div class="comment-display" id="comment-display-@comment.CommentId">
                            <div class="p-3" style="background-color: #f8f9fa; border-radius: 0.5rem; border-left: 4px solid #ff4b37;">
                                <div class="d-flex align-items-start gap-3">
                                    <div class="flex-shrink-0">
                                        @if (!string.IsNullOrEmpty(comment.Author.ProfilePicture))
                                        {
                                            <img src="@comment.Author.ProfilePicture" alt="@comment.Author.Name" class="rounded-circle" style="width: 36px; height: 36px; object-fit: cover;" />
                                        }
                                        else
                                        {
                                            <div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width: 36px; height: 36px;">
                                                <i class="bi bi-person-fill text-white small"></i>
                                            </div>
                                        }
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div class="d-flex align-items-center gap-2">
                                                <a asp-controller="Profile" asp-action="ViewProfile" asp-route-id="@comment.AuthorId" class="text-decoration-none fw-bold small" style="color: #ff4b37 !important;">@comment.Author.Name</a>
                                                <span class="text-muted small">•</span>
                                                @if (comment.UpdatedAt.HasValue)
                                                {
                                                    <span class="text-muted small">
                                                        <i class="bi bi-clock me-1"></i>Edited @comment.UpdatedAt.Value.ToString("dd MMM h:mm tt")
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted small">
                                                        <i class="bi bi-clock me-1"></i>@comment.CreatedAt.ToString("dd MMM h:mm tt")
                                                    </span>
                                                }
                                            </div>
                                            @if (!string.IsNullOrEmpty(currentUserId) && (comment.AuthorId == currentUserId || User.IsInRole("Admin")))
                                            {
                                                <div class="d-flex align-items-center gap-1">
                                                    @if (comment.AuthorId == currentUserId)
                                                    {
                                                        <button class="btn btn-sm btn-outline-secondary" title="Edit comment" onclick="toggleEditComment(@comment.CommentId)">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                    }
                                                    <form asp-controller="Comments" asp-action="Delete" method="post" onsubmit="return confirm('Are you sure you want to delete this comment?');" class="d-inline">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="commentId" value="@comment.CommentId" />
                                                        <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete comment">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </form>
                                                </div>
                                            }
                                        </div>
                                        <div class="comment-content">
                                            <p class="mb-0" style="line-height: 1.6;">@comment.Content</p>
                                        </div>
                                        
                                        <!-- Comment Actions Bar -->
                                        <div class="comment-actions d-flex align-items-center flex-wrap mt-2">
                                            <div class="action-vote pill d-inline-flex align-items-center me-2" style="background-color: #e9ecef; border-color: #dee2e6; color: #000000 !important;">
                                                <form asp-controller="Votes" asp-action="CommentVote" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="commentId" value="@comment.CommentId" />
                                                    <input type="hidden" name="isUpvote" value="true" />
                                                    <button type="submit" class="action-btn btn-icon comment-upvote" data-comment-id="@comment.CommentId" aria-label="Upvote comment"><i class="bi bi-arrow-up"></i></button>
                                                </form>
                                                <span class="score mx-1" id="comment-score-@comment.CommentId" style="color: #000000 !important;">0</span>
                                                <form asp-controller="Votes" asp-action="CommentVote" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="commentId" value="@comment.CommentId" />
                                                    <input type="hidden" name="isUpvote" value="false" />
                                                    <button type="submit" class="action-btn btn-icon comment-downvote" data-comment-id="@comment.CommentId" aria-label="Downvote comment"><i class="bi bi-arrow-down"></i></button>
                                                </form>
                                            </div>
                                            <button class="action-btn pill comment-share" data-comment-id="@comment.CommentId" type="button" aria-label="Share comment" style="background-color: #e9ecef; border-color: #dee2e6; color: #000000 !important;"><i class="bi bi-share" style="color: #000000 !important;"></i><span class="d-none d-sm-inline ms-1" style="color: #000000 !important;">Share</span></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="comment-edit" id="comment-edit-@comment.CommentId" style="display: none;">
                            <div class="comment-composer mb-4">
                                <form asp-controller="Comments" asp-action="Edit" method="post">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="commentId" value="@comment.CommentId" />
                                    <div class="d-flex align-items-start gap-3">
                                        <div class="flex-shrink-0">
                                            @if (currentUser != null && !string.IsNullOrEmpty(currentUser.ProfilePicture))
                                            {
                                                <img src="@currentUser.ProfilePicture" alt="@currentUser.Name" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover;" />
                                            }
                                            else
                                            {
                                                <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                                    <i class="bi bi-person-fill text-white"></i>
                                                </div>
                                            }
                                        </div>
                                        <div class="flex-grow-1">
                                            <textarea name="content" class="form-control composer-input collapsed" rows="3" placeholder="Share your thoughts..." required>@comment.Content</textarea>
                                            <div class="composer-actions">
                                                <button type="submit" class="btn btn-sm" style="background-color: #ff4b37; border-color: #ff4b37; color: white;">
                                                    <i class="bi bi-check-lg me-1"></i>Save
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleEditComment(@comment.CommentId)">
                                                    Cancel
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-chat text-muted mb-3" style="font-size: 3rem;"></i>
                    <h6 class="text-muted mb-2">No comments yet</h6>
                    <p class="text-muted small mb-0">Be the first to share your thoughts!</p>
                </div>
            }
        </div>
    </div>

    
</div>

@section Scripts {
    <script>
        function showToast(message) {
            const c = document.getElementById('toasts'); if (!c) { alert(message); return; }
            const el = document.createElement('div'); el.className = 'toast align-items-center text-bg-dark border-0'; el.role = 'status'; el.ariaLive = 'polite'; el.ariaAtomic = 'true';
            el.innerHTML = `<div class="d-flex"><div class="toast-body">${message}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div>`;
            c.appendChild(el); try { const t = new bootstrap.Toast(el, { delay: 2000 }); t.show(); el.addEventListener('hidden.bs.toast', () => el.remove()); } catch (e) { }
        }
        async function shareLink() {
            const url = window.location.href; const title = document.title;
            if (navigator.share) { try { await navigator.share({ title, url }); return; } catch (e) {} }
            try { await navigator.clipboard.writeText(url); showToast('Link copied to clipboard'); } catch (e) { alert(url); }
        }

        async function sendCommentVote(commentId, isUpvote) {
            try {
                const formData = new FormData();
                formData.append('commentId', commentId);
                formData.append('isUpvote', isUpvote);
                const tokenEl = document.querySelector('form[action="/Votes/CommentVote"] input[name="__RequestVerificationToken"]');
                if (tokenEl) formData.append('__RequestVerificationToken', tokenEl.value);

                const res = await fetch('/Votes/CommentVote', { method: 'POST', body: formData, headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                
                if (res.status === 401) { window.location.href = '/Identity/Account/Login'; return { removed: false }; }
                if (res.ok) {
                    let removed = false;
                    try { const j = await res.json(); removed = !!(j && j.removed); } catch (e) {}
                    const c = await fetch(`/Votes/CommentCount?commentId=${commentId}`);
                    if (c.ok) {
                        const json = await c.json();
                        const s = document.getElementById(`comment-score-${commentId}`);
                        if (s) s.textContent = (json && typeof json.netScore !== 'undefined') ? json.netScore : 0;
                    }
                    return { removed };
                }
            } catch (e) { }
            return { removed: false };
        }

        async function shareComment(commentId) {
            const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`).closest('.comment-item');
            const commentText = commentElement.querySelector('.comment-content p').textContent;
            const commentUrl = `${window.location.href}#comment-${commentId}`;
            
            if (navigator.share) {
                try {
                    await navigator.share({ 
                        title: 'Comment from Insightly',
                        text: commentText,
                        url: commentUrl 
                    });
                    return;
                } catch (e) {}
            }
            
            try {
                await navigator.clipboard.writeText(commentUrl);
                showToast('Comment link copied to clipboard');
            } catch (e) {
                alert(commentUrl);
            }
        }
        
        function toggleEditComment(commentId) {
            const displayDiv = document.getElementById(`comment-display-${commentId}`);
            const editDiv = document.getElementById(`comment-edit-${commentId}`);
            
            if (displayDiv.style.display === 'none') {
                // Show display, hide edit
                displayDiv.style.display = 'block';
                editDiv.style.display = 'none';
            } else {
                // Show edit, hide display
                displayDiv.style.display = 'none';
                editDiv.style.display = 'block';
                
                // Focus the textarea and expand it
                const textarea = editDiv.querySelector('textarea');
                if (textarea) {
                    textarea.focus();
                    textarea.classList.remove('collapsed');
                    textarea.classList.add('expanded');
                    const actions = editDiv.querySelector('.composer-actions');
                    if (actions) actions.classList.add('show');
                }
            }
        }
        
        document.addEventListener('DOMContentLoaded', function () {
            var shareBtn = document.getElementById('btn-share'); if (shareBtn) shareBtn.addEventListener('click', shareLink);
            var scrollBtn = document.getElementById('btn-scroll-comments'); if (scrollBtn) scrollBtn.addEventListener('click', function (e) {
                e.preventDefault(); var target = document.getElementById('comments');
                if (target && target.scrollIntoView) target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            });

            // Article voting: init, load score and existing user vote, and attach handlers
            (function initArticleVoting() {
                const up = document.getElementById('ab-upvote');
                const down = document.getElementById('ab-downvote');
                const scoreEl = document.getElementById('ab-score');
                const tokenEl = document.querySelector('form[action="/Votes/Vote"] input[name="__RequestVerificationToken"]');
                const articleId = up?.getAttribute('data-article-id') || down?.getAttribute('data-article-id');
                if (!articleId) return;

                (async () => {
                    try {
                        const r = await fetch(`/Votes/Count?articleId=${articleId}`);
                        if (r.ok && scoreEl) {
                            const j = await r.json();
                            scoreEl.textContent = (j && typeof j.netScore !== 'undefined') ? j.netScore : scoreEl.textContent;
                        }
                    } catch (e) {}

                    try {
                        const rv = await fetch(`/Votes/UserArticleVote?articleId=${articleId}`);
                        if (rv.ok) {
                            const v = await rv.json();
                            if (v && v.voted === true) {
                                if (v.isUpvote) { up?.classList.add('active-up'); down?.classList.remove('active-down'); }
                                else { down?.classList.add('active-down'); up?.classList.remove('active-up'); }
                            } else {
                                up?.classList.remove('active-up');
                                down?.classList.remove('active-down');
                            }
                        }
                    } catch (e) {}
                })();

                async function sendArticleVote(isUpvote) {
                    try {
                        const formData = new FormData();
                        formData.append('articleId', articleId);
                        formData.append('isUpvote', isUpvote);
                        if (tokenEl) formData.append('__RequestVerificationToken', tokenEl.value);

                        const res = await fetch('/Votes/Vote', { method: 'POST', body: formData, headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                        if (res.status === 401) { window.location.href = '/Identity/Account/Login'; return; }
                        if (!res.ok) return;
                        let removed = false; try { const j = await res.json(); removed = !!(j && j.removed); } catch (e) {}

                        try {
                            const c = await fetch(`/Votes/Count?articleId=${articleId}`);
                            if (c.ok && scoreEl) {
                                const json = await c.json();
                                scoreEl.textContent = (json && typeof json.netScore !== 'undefined') ? json.netScore : scoreEl.textContent;
                            }
                        } catch (e) {}

                        if (isUpvote) {
                            if (removed) { up?.classList.remove('active-up'); }
                            else { up?.classList.add('active-up'); down?.classList.remove('active-down'); }
                        } else {
                            if (removed) { down?.classList.remove('active-down'); }
                            else { down?.classList.add('active-down'); up?.classList.remove('active-up'); }
                        }
                    } catch (e) {}
                }

                if (up) up.addEventListener('click', function (e) { e.preventDefault(); sendArticleVote(true); });
                if (down) down.addEventListener('click', function (e) { e.preventDefault(); sendArticleVote(false); });
            })();

            // Load comment scores
            document.querySelectorAll('[id^="comment-score-"]').forEach(async el => {
                const commentId = el.id.replace('comment-score-', '');
                try {
                    const res = await fetch(`/Votes/CommentCount?commentId=${commentId}`);
                    if (res.ok) {
                        const json = await res.json();
                        el.textContent = (json && typeof json.netScore !== 'undefined') ? json.netScore : 0;
                    }
                } catch (e) {}
            });

            // Load current user's vote state for each comment
            document.querySelectorAll('.comment-actions .comment-upvote').forEach(async btn => {
                const commentId = btn.getAttribute('data-comment-id');
                const downBtn = btn.closest('.comment-actions')?.querySelector('.comment-downvote');
                try {
                    const rv = await fetch(`/Votes/UserCommentVote?commentId=${commentId}`);
                    if (rv.ok) {
                        const v = await rv.json();
                        if (v && v.voted === true) {
                            if (v.isUpvote) { btn.classList.add('active-up'); if (downBtn) downBtn.classList.remove('active-down'); }
                            else { if (downBtn) downBtn.classList.add('active-down'); btn.classList.remove('active-up'); }
                        } else {
                            btn.classList.remove('active-up'); if (downBtn) downBtn.classList.remove('active-down');
                        }
                    }
                } catch (e) {}
            });

            // Comment voting functionality
            document.querySelectorAll('.comment-upvote').forEach(btn => {
                btn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const commentId = this.getAttribute('data-comment-id');
                    const down = this.closest('.comment-actions')?.querySelector('.comment-downvote');
                    const { removed } = await sendCommentVote(commentId, true);
                    if (removed) {
                        this.classList.remove('active-up');
                    } else {
                        this.classList.add('active-up');
                        if (down) down.classList.remove('active-down');
                    }
                });
            });

            document.querySelectorAll('.comment-downvote').forEach(btn => {
                btn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const commentId = this.getAttribute('data-comment-id');
                    const up = this.closest('.comment-actions')?.querySelector('.comment-upvote');
                    const { removed } = await sendCommentVote(commentId, false);
                    if (removed) {
                        this.classList.remove('active-down');
                    } else {
                        this.classList.add('active-down');
                        if (up) up.classList.remove('active-up');
                    }
                });
            });

            // Comment sharing functionality
            document.querySelectorAll('.comment-share').forEach(btn => {
                btn.addEventListener('click', function() {
                    const commentId = this.getAttribute('data-comment-id');
                    shareComment(commentId);
                });
            });

            // Minimal composer UX: expand on focus/typing, collapse when empty + blur
            var composerInput = document.getElementById('comment-content');
            var composerActions = document.querySelector('.composer-actions');
            function expandComposer() {
                if (!composerInput) return;
                composerInput.classList.remove('collapsed');
                composerInput.classList.add('expanded');
                if (composerActions) composerActions.classList.add('show');
            }
            function collapseComposer() {
                if (!composerInput) return;
                if ((composerInput.value || '').trim().length > 0) return;
                composerInput.classList.add('collapsed');
                composerInput.classList.remove('expanded');
                if (composerActions) composerActions.classList.remove('show');
            }
            if (composerInput) composerInput.addEventListener('focus', expandComposer);
            if (composerInput) composerInput.addEventListener('input', function () {
                if ((composerInput.value || '').trim().length > 0) { expandComposer(); }
            });
            if (composerInput) composerInput.addEventListener('blur', function () { setTimeout(collapseComposer, 100); });

            // Save/Unsave functionality
            const saveForm = document.getElementById('save-form');
            if (saveForm) {
                saveForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(this);
                    const button = this.querySelector('button[type="submit"]');
                    const icon = button.querySelector('i');
                    
                    try {
                        const response = await fetch(this.action, {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: formData
                        });
                        
                        if (response.ok) {
                            const result = await response.json();
                            
                            // Toggle icon only
                            if (result.isSaved) {
                                button.classList.add('is-on');
                                button.title = 'Unsave article';
                                icon.className = 'bi bi-bookmark-fill';
                            } else {
                                button.classList.remove('is-on');
                                button.title = 'Save article';
                                icon.className = 'bi bi-bookmark';
                            }
                            
                            // Show success message
                            if (result.message) {
                                // You could add a toast notification here
                                console.log(result.message);
                            }
                        } else if (response.status === 401) {
                            window.location.href = '/Identity/Account/Login';
                        }
                    } catch (error) {
                        console.error('Error saving/unsaving article:', error);
                    }
                });
            }
        });
    </script>
}
