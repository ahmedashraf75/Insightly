@model List<Article>

@{
    ViewData["Title"] = "Home Page";
}

<div class="home-page container py-5">
    <!-- Hero Section -->
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold">Welcome to <span class="brand-accent">Insightly</span></h1>
        <p class="lead text-muted">Read, share, and engage with articles easily</p>
        <a asp-controller="Profile" asp-action="Index" class="btn btn-primary btn-lg mt-3">
            <i class="bi bi-person me-2"></i> My Profile
        </a>
    </div>

    <!-- Latest Articles (Reddit-like list) -->
    <div class="d-flex flex-column gap-3" id="articlesContainer">
        @foreach (var article in Model)
        {
            <div class="post-card d-flex article-item clickable-card"
                 data-title="@article.Title.ToLower()"
                 data-content="@article.Content.ToLower()"
                 data-author="@article.Author.Name.ToLower()"
                 data-article-url="/Articles/Details/@article.ArticleId">
                <div class="vote-col d-flex flex-column align-items-center justify-content-start py-2">
                    <button class="btn btn-link p-0 vote-btn upvote" data-article-id="@article.ArticleId" aria-label="Upvote">
                        <i class="bi bi-arrow-up-circle fs-4"></i>
                    </button>
                    <div class="score my-1" id="score-@article.ArticleId">0</div>
                    <button class="btn btn-link p-0 vote-btn downvote" data-article-id="@article.ArticleId" aria-label="Downvote">
                        <i class="bi bi-arrow-down-circle fs-4"></i>
                    </button>
                </div>
                <div class="flex-grow-1 p-3">
                    <div class="d-flex align-items-center gap-2 mb-1 text-muted small">
                        <span>Posted by <a asp-controller="Profile" asp-action="ViewProfile" asp-route-id="@article.AuthorId" class="text-decoration-none fw-medium" style="color: #ff4b37 !important;">@article.Author.Name</a></span>
                        <span>•</span>
                        <span>@article.CreatedAt.ToString("dd MMM yyyy")</span>
                    </div>
                    <h5 class="mb-2"><a class="text-decoration-none" href="/Articles/Details/@article.ArticleId">@article.Title</a></h5>
                    <p class="mb-3 text-muted">
                        @article.Content.Substring(0, Math.Min(180, article.Content.Length))...
                    </p>
                    <div class="d-flex align-items-center justify-content-end">
                        <a href="/Articles/Details/@article.ArticleId" class="btn btn-sm btn-outline-primary read-more-btn">Read more</a>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Load More Button -->
    <div class="text-center mt-4" id="loadMoreContainer">
        <button id="loadMoreBtn" class="btn btn-outline-primary" style="border-color: var(--primary); color: var(--primary);" onmouseover="this.style.backgroundColor='var(--primary)'; this.style.color='white';" onmouseout="this.style.backgroundColor='transparent'; this.style.color='var(--primary)';">
            <i class="bi bi-arrow-down-circle me-2"></i>Load More Articles
        </button>
        <div id="loadingSpinner" class="spinner-border mt-3" role="status" style="display: none; color: var(--primary);">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <!-- No Results Message -->
    <div id="noResultsMessage" class="text-center py-5" style="display: none;">
        <i class="bi bi-search display-1 text-muted mb-3"></i>
        <h4>No articles found</h4>
        <p class="text-muted">Try adjusting your search terms</p>
    </div>
</div>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', () => {
  let currentSkip = 3; // Start from 4th article (0-indexed, so skip 3)
  const take = 3; // Load 3 articles at a time
  
  document.querySelectorAll('[id^="score-\u200b"]').forEach(() => {}); // placeholder to ensure section renders even if no items
  // Fetch initial scores
  document.querySelectorAll('[id^="score-\u200b"]').forEach(() => {});
  document.querySelectorAll('[id^="score-"]').forEach(async el => {
    const id = el.id.replace('score-', '');
    try {
      const res = await fetch(`/Votes/Count?articleId=${id}`);
      if (res.ok) {
        const json = await res.json();
        el.textContent = (json && typeof json.netScore !== 'undefined') ? json.netScore : 0;
      }
    } catch (e) {}
  });

  // Fetch user vote status for each article (avoid duplicates)
  const processedArticles = new Set();
  document.querySelectorAll('.vote-btn').forEach(async btn => {
    const articleId = btn.getAttribute('data-article-id');
    if (articleId && !processedArticles.has(articleId)) {
      processedArticles.add(articleId);
      try {
        const res = await fetch(`/Votes/UserArticleVote?articleId=${articleId}`, {
          method: 'GET',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        });
        if (res.ok) {
          const json = await res.json();
          console.log(`Vote status for article ${articleId}:`, json);
          if (json.voted) {
            const upvoteBtn = document.querySelector(`.upvote[data-article-id="${articleId}"]`);
            const downvoteBtn = document.querySelector(`.downvote[data-article-id="${articleId}"]`);
            console.log(`Found buttons for article ${articleId}:`, { upvoteBtn, downvoteBtn });
            if (json.isUpvote) {
              if (upvoteBtn) {
                upvoteBtn.classList.add('active-up');
                console.log(`Added active-up class to upvote button for article ${articleId}`);
              }
              if (downvoteBtn) downvoteBtn.classList.remove('active-down');
            } else {
              if (downvoteBtn) {
                downvoteBtn.classList.add('active-down');
                console.log(`Added active-down class to downvote button for article ${articleId}`);
              }
              if (upvoteBtn) upvoteBtn.classList.remove('active-up');
            }
          } else {
            // Remove any existing active classes if user hasn't voted
            const upvoteBtn = document.querySelector(`.upvote[data-article-id="${articleId}"]`);
            const downvoteBtn = document.querySelector(`.downvote[data-article-id="${articleId}"]`);
            if (upvoteBtn) upvoteBtn.classList.remove('active-up');
            if (downvoteBtn) downvoteBtn.classList.remove('active-down');
          }
        } else {
          console.log(`Failed to fetch vote status for article ${articleId}, status:`, res.status);
        }
      } catch (e) {
        console.log(`Error fetching vote status for article ${articleId}:`, e);
      }
    }
  });

  async function sendVote(articleId, isUpvote) {
    try {
      const res = await fetch('/Votes/AjaxVote', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({ articleId: parseInt(articleId), isUpvote: Boolean(isUpvote) })
      });
      if (res.ok) {
        const c = await fetch(`/Votes/Count?articleId=${articleId}`);
        if (c.ok) {
          const json = await c.json();
          const s = document.getElementById(`score-${articleId}`);
          if (s) s.textContent = (json && typeof json.netScore !== 'undefined') ? json.netScore : 0;
        }
      } else if (res.status === 401) {
        window.location.href = '/Identity/Account/Login';
      }
    } catch (e) {}
  }

  document.querySelectorAll('.upvote').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const id = btn.getAttribute('data-article-id');
      console.log('Upvote clicked for article:', id);
      
      // Toggle visual state immediately
      const down = btn.closest('.post-card')?.querySelector('.downvote');
      if (btn.classList.contains('active-up')) {
        // If already upvoted, remove the vote
        btn.classList.remove('active-up');
        console.log('Removed upvote for article:', id);
      } else {
        // Add upvote, remove downvote
        btn.classList.add('active-up');
        if (down) down.classList.remove('active-down');
        console.log('Added upvote for article:', id);
      }
      
      sendVote(id, true);
    });
  });
  document.querySelectorAll('.downvote').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const id = btn.getAttribute('data-article-id');
      console.log('Downvote clicked for article:', id);
      
      // Toggle visual state immediately
      const up = btn.closest('.post-card')?.querySelector('.upvote');
      if (btn.classList.contains('active-down')) {
        // If already downvoted, remove the vote
        btn.classList.remove('active-down');
        console.log('Removed downvote for article:', id);
      } else {
        // Add downvote, remove upvote
        btn.classList.add('active-down');
        if (up) up.classList.remove('active-up');
        console.log('Added downvote for article:', id);
      }
      
      sendVote(id, false);
    });
  });

  // Load More functionality
  async function loadMoreArticles() {
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const articlesContainer = document.getElementById('articlesContainer');
    
    // Show loading state
    loadMoreBtn.style.display = 'none';
    loadingSpinner.style.display = 'block';
    
    try {
      const response = await fetch(`/Home/LoadMoreArticles?skip=${currentSkip}&take=${take}`);
      if (response.ok) {
        const articles = await response.json();
        
        if (articles.length === 0) {
          // No more articles, hide the load more container
          document.getElementById('loadMoreContainer').style.display = 'none';
          return;
        }
        
        // Add new articles to the container
        articles.forEach(article => {
          const articleHtml = createArticleHtml(article);
          articlesContainer.insertAdjacentHTML('beforeend', articleHtml);
        });
        
        // Update skip for next request
        currentSkip += take;
        
        // Re-attach event listeners to new vote buttons
        attachVoteListeners();
        
        // Fetch scores for new articles
        fetchScoresForNewArticles(articles);
        
        // Fetch user vote status for new articles
        fetchUserVoteStatusForNewArticles(articles);
        
        // Show button again if we got a full batch (might be more articles)
        if (articles.length === take) {
          loadMoreBtn.style.display = 'inline-block';
        } else {
          // Hide load more if we got less than requested (no more articles)
          document.getElementById('loadMoreContainer').style.display = 'none';
        }
      }
    } catch (error) {
      console.error('Error loading more articles:', error);
      loadMoreBtn.style.display = 'inline-block';
    } finally {
      loadingSpinner.style.display = 'none';
    }
  }
  
  function createArticleHtml(article) {
    const contentPreview = article.content.length > 180 ? 
      article.content.substring(0, 180) + '...' : 
      article.content;
    
    const createdAt = new Date(article.createdAt).toLocaleDateString('en-GB', {
      day: '2-digit',
      month: 'short',
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
    
    return `
      <div class="post-card d-flex article-item clickable-card"
           data-title="${article.title.toLowerCase()}"
           data-content="${article.content.toLowerCase()}"
           data-author="${article.author.name.toLowerCase()}"
           data-article-url="/Articles/Details/${article.articleId}">
        <div class="vote-col d-flex flex-column align-items-center justify-content-start py-2">
          <button class="btn btn-link p-0 vote-btn upvote" data-article-id="${article.articleId}" aria-label="Upvote">
            <i class="bi bi-arrow-up-circle fs-4"></i>
          </button>
          <div class="score my-1" id="score-${article.articleId}">0</div>
          <button class="btn btn-link p-0 vote-btn downvote" data-article-id="${article.articleId}" aria-label="Downvote">
            <i class="bi bi-arrow-down-circle fs-4"></i>
          </button>
        </div>
        <div class="flex-grow-1 p-3">
          <div class="d-flex align-items-center gap-2 mb-1 text-muted small">
            <span>Posted by ${article.author.name}</span>
            <span>•</span>
            <span>${createdAt}</span>
          </div>
          <h5 class="mb-2"><a class="text-decoration-none" href="/Articles/Details/${article.articleId}">${article.title}</a></h5>
          <p class="mb-3 text-muted">${contentPreview}</p>
          <div class="d-flex align-items-center justify-content-end">
            <a href="/Articles/Details/${article.articleId}" class="btn btn-sm btn-outline-primary read-more-btn">Read more</a>
          </div>
        </div>
      </div>
    `;
  }
  
  function attachVoteListeners() {
    // Remove existing listeners and re-attach to all vote buttons
    document.querySelectorAll('.upvote').forEach(btn => {
      btn.removeEventListener('click', handleUpvote);
      btn.addEventListener('click', handleUpvote);
    });
    document.querySelectorAll('.downvote').forEach(btn => {
      btn.removeEventListener('click', handleDownvote);
      btn.addEventListener('click', handleDownvote);
    });
  }
  
  function handleUpvote(e) {
    const id = e.target.closest('.upvote').getAttribute('data-article-id');
    e.target.closest('.upvote').classList.add('active-up');
    const down = e.target.closest('.post-card')?.querySelector('.downvote');
    if (down) down.classList.remove('active-down');
    sendVote(id, true);
  }
  
  function handleDownvote(e) {
    const id = e.target.closest('.downvote').getAttribute('data-article-id');
    e.target.closest('.downvote').classList.add('active-down');
    const up = e.target.closest('.post-card')?.querySelector('.upvote');
    if (up) up.classList.remove('active-up');
    sendVote(id, false);
  }
  
  function fetchScoresForNewArticles(articles) {
    articles.forEach(async article => {
      try {
        const res = await fetch(`/Votes/Count?articleId=${article.articleId}`);
        if (res.ok) {
          const json = await res.json();
          const scoreEl = document.getElementById(`score-${article.articleId}`);
          if (scoreEl) {
            scoreEl.textContent = (json && typeof json.netScore !== 'undefined') ? json.netScore : 0;
          }
        }
      } catch (e) {}
    });
  }

  function fetchUserVoteStatusForNewArticles(articles) {
    articles.forEach(async article => {
      try {
        const res = await fetch(`/Votes/UserArticleVote?articleId=${article.articleId}`, {
          method: 'GET',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        });
        if (res.ok) {
          const json = await res.json();
          if (json.voted) {
            const upvoteBtn = document.querySelector(`.upvote[data-article-id="${article.articleId}"]`);
            const downvoteBtn = document.querySelector(`.downvote[data-article-id="${article.articleId}"]`);
            if (json.isUpvote) {
              if (upvoteBtn) upvoteBtn.classList.add('active-up');
              if (downvoteBtn) downvoteBtn.classList.remove('active-down');
            } else {
              if (downvoteBtn) downvoteBtn.classList.add('active-down');
              if (upvoteBtn) upvoteBtn.classList.remove('active-up');
            }
          } else {
            // Remove any existing active classes if user hasn't voted
            const upvoteBtn = document.querySelector(`.upvote[data-article-id="${article.articleId}"]`);
            const downvoteBtn = document.querySelector(`.downvote[data-article-id="${article.articleId}"]`);
            if (upvoteBtn) upvoteBtn.classList.remove('active-up');
            if (downvoteBtn) downvoteBtn.classList.remove('active-down');
          }
        }
      } catch (e) {
        // Silently handle errors
      }
    });
  }
  
  // Attach load more button event listener
  document.getElementById('loadMoreBtn').addEventListener('click', loadMoreArticles);
});
</script>
}
